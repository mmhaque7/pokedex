{"version":3,"sources":["imgs/Pokeball.png","components/layout/NavBar.js","components/pokemon/PokemonCard.js","components/pokemon/PokemonList.js","components/layout/Dashboard.js","components/pokemon/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","href","src","pokeBall","alt","Component","PokemonCard","state","name","imgUrl","gifUrl","pokemonIndex","this","props","url","split","setState","id","to","toLowerCase","map","letter","charAt","toUpperCase","substring","join","PokemonList","useState","pokemon","setPokemon","currentPageURL","setCurrentPageUrl","nexPageURL","setNextPageURL","prevPageURL","setPrevURL","Loading","setLoading","useEffect","cancel","Axios","get","cancelToken","CancelToken","c","then","res","data","next","previous","results","key","onClick","Dashboard","Pokemon","pokeName","setpokeName","setimgUrl","params","useParams","App","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05f3ff11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pokeball.f7b41b0b.png\";","import React, { Component } from 'react';\r\nimport styled from \"styled-components\";\r\nimport pokeBall from '../../imgs/Pokeball.png'\r\nimport './NavBar.css'\r\n\r\n\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\r\n                    <a className=\"navbar-brand col-sm-2 col-md-1 mr-0 align-items-center\" href =\" \"><img src={pokeBall} alt=\"pokeball\" className=\"poke-ball\"></img>PokeDex</a>\r\n                    \r\n                    </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./PokemonCard.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class PokemonCard extends Component {\r\n  state = {\r\n    name: \"\",\r\n    imgUrl: \"\",\r\n    gifUrl: \"\",\r\n    pokemonIndex: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { name, url } = this.props;\r\n    const pokemonIndex = url.split(\"/\")[6];\r\n\r\n    const imgUrl = `https://img.pokemondb.net/sprites/bank/normal/${name}.png`;\r\n\r\n    this.setState({ name, imgUrl, pokemonIndex });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-3 col-sm-1 mb-5\" id=\"container\">\r\n        <Link to={`pokemon/${this.state.pokemonIndex}`} className=\"link-map\">\r\n          <div className=\"card\">\r\n            <h2 className=\"card-header\" id=\"pokemon-index\">\r\n              {this.state.pokemonIndex}\r\n            </h2>\r\n\r\n            <div className=\"card-body mx-auto\">\r\n              <h2 className=\"pokemon-name\">\r\n                {this.state.name\r\n                  .toLowerCase()\r\n                  .split(\" \")\r\n                  .map(\r\n                    (letter) =>\r\n                      letter.charAt(0).toUpperCase() + letter.substring(1)\r\n                  )\r\n                  .join(\" \")}\r\n              </h2>\r\n              <img\r\n                src={this.state.imgUrl}\r\n                alt={this.state.name}\r\n                className=\"pokemon-img\"\r\n              ></img>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\n\r\nexport default function PokemonList() {\r\n  const [pokemon, setPokemon] = useState([]);\r\n  const [currentPageURL, setCurrentPageUrl] = useState(\r\n    \"https://pokeapi.co/api/v2/pokemon\"\r\n  );\r\n  const [nexPageURL, setNextPageURL] = useState(\"\");\r\n  const [prevPageURL, setPrevURL] = useState(\"\");\r\n  const [Loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    let cancel;\r\n    Axios.get(currentPageURL, {\r\n      cancelToken: new Axios.CancelToken((c) => (cancel = c)),\r\n    }).then((res) => {\r\n      setLoading(false);\r\n      setNextPageURL(res.data.next);\r\n      setPrevURL(res.data.previous);\r\n      setPokemon(res.data.results);\r\n    });\r\n\r\n    return () => cancel();\r\n    \r\n  }, [currentPageURL]);\r\n\r\n  if (Loading) return \"Loading Pokemon.....\";\r\n\r\n  function nextPage(){\r\n    setCurrentPageUrl(nexPageURL)\r\n  } \r\n   function prevPage(){\r\n    setCurrentPageUrl(prevPageURL)\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {pokemon.map((pokemon) => (\r\n        <PokemonCard key={pokemon.name} name={pokemon.name} url={pokemon.url} />\r\n      ))}\r\n      <button onClick={nextPage}>NextPage</button> \r\n      <button onClick={prevPage}>PreviousPage</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport PokemonList from \"../pokemon/PokemonList\"\r\nexport default class Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className = \"col\">\r\n                    <PokemonList/>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Pokemon(props) {\r\n  const [pokeName, setpokeName] = useState(\"\");\r\n  //const [pokemonIndex, setpokemonIndex] = useState('');\r\n  const [imgUrl, setimgUrl] = useState(\r\n    `https://img.pokemondb.net/sprites/bank/normal/${pokeName}.png`\r\n  );\r\n  \r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    // setpokemonIndex(params.pokemonIndex);\r\n    Axios.get(\r\n      `https://pokeapi.co/api/v2/pokemon/${params.pokemonIndex}/`\r\n    ).then((res) => {\r\n        setpokeName(res.data.name);\r\n        setimgUrl(`https://img.pokemondb.net/sprites/bank/normal/${res.data.name}.png`)\r\n    });\r\n    \r\n  }, [params.pokemonIndex, pokeName]);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1>{pokeName}</h1>\r\n      <img src={imgUrl} alt={pokeName}/>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\n\nimport NavBar from \"./components/layout/NavBar\";\nimport Dashboard from \"./components/layout/Dashboard\";\n\nimport Pokemon from \"./components/pokemon/Pokemon\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Dashboard} />\n              <Route\n                exact\n                path=\"/pokemon/:pokemonIndex\"\n                render={() => <Pokemon />}\n              />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}